

// returns minimum value between l and r
__min(l, r, start,end,node)
{
    if (start-end and l-r do no coincide)
    {
	// this subsequence will contribute to answer
        return INT_MAX;
    }

    if (start-end is a subset of l-r)
    {
	// this subsequence will not contribute to answer
        return tree[node];
    }

    // mid is node between start and end
    // we merge answer value
    return min(__min(l, r,start,mid,2*node), __min(l,r,mid+1,end,2*node+1));
}


